/**
 * Manticore Search Client
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BoolFilter from './BoolFilter';
import FulltextFilter from './FulltextFilter';
import GeoDistance from './GeoDistance';

/**
 * The QueryFilter model module.
 * @module model/QueryFilter
 * @version 7.0.0
 */
class QueryFilter {
    /**
     * Constructs a new <code>QueryFilter</code>.
     * Object used to apply various conditions, such as full-text matching or attribute filtering, to a search query
     * @alias module:model/QueryFilter
     * @implements module:model/FulltextFilter
     */
    constructor() { 
        FulltextFilter.initialize(this);
        QueryFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QueryFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryFilter} obj Optional instance to populate.
     * @return {module:model/QueryFilter} The populated <code>QueryFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryFilter();
            FulltextFilter.constructFromObject(data, obj);

            if (data.hasOwnProperty('query_string')) {
                obj['query_string'] = ApiClient.convertToType(data['query_string'], Object);
            }
            if (data.hasOwnProperty('match')) {
                obj['match'] = ApiClient.convertToType(data['match'], Object);
            }
            if (data.hasOwnProperty('match_phrase')) {
                obj['match_phrase'] = ApiClient.convertToType(data['match_phrase'], Object);
            }
            if (data.hasOwnProperty('match_all')) {
                obj['match_all'] = ApiClient.convertToType(data['match_all'], Object);
            }
            if (data.hasOwnProperty('bool')) {
                obj['bool'] = BoolFilter.constructFromObject(data['bool']);
            }
            if (data.hasOwnProperty('equals')) {
                obj['equals'] = ApiClient.convertToType(data['equals'], Object);
            }
            if (data.hasOwnProperty('in')) {
                obj['in'] = ApiClient.convertToType(data['in'], Object);
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = ApiClient.convertToType(data['range'], Object);
            }
            if (data.hasOwnProperty('geo_distance')) {
                obj['geo_distance'] = GeoDistance.constructFromObject(data['geo_distance']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryFilter</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bool`
        if (data['bool']) { // data not null
          BoolFilter.validateJSON(data['bool']);
        }
        // validate the optional field `geo_distance`
        if (data['geo_distance']) { // data not null
          GeoDistance.validateJSON(data['geo_distance']);
        }

        return true;
    }


}



/**
 * Filter object defining a query string
 * @member {Object} query_string
 */
QueryFilter.prototype['query_string'] = undefined;

/**
 * Filter object defining a match keyword passed as a string or in a Match object
 * @member {Object} match
 */
QueryFilter.prototype['match'] = undefined;

/**
 * Filter object defining a match phrase
 * @member {Object} match_phrase
 */
QueryFilter.prototype['match_phrase'] = undefined;

/**
 * Filter object to select all documents
 * @member {Object} match_all
 */
QueryFilter.prototype['match_all'] = undefined;

/**
 * @member {module:model/BoolFilter} bool
 */
QueryFilter.prototype['bool'] = undefined;

/**
 * @member {Object} equals
 */
QueryFilter.prototype['equals'] = undefined;

/**
 * Filter to match a given set of attribute values.
 * @member {Object} in
 */
QueryFilter.prototype['in'] = undefined;

/**
 * Filter to match a given range of attribute values passed in Range objects
 * @member {Object} range
 */
QueryFilter.prototype['range'] = undefined;

/**
 * @member {module:model/GeoDistance} geo_distance
 */
QueryFilter.prototype['geo_distance'] = undefined;


// Implement FulltextFilter interface:
/**
 * Filter object defining a query string
 * @member {String} query_string
 */
FulltextFilter.prototype['query_string'] = undefined;
/**
 * Filter object defining a match keyword passed as a string or in a Match object
 * @member {Object} match
 */
FulltextFilter.prototype['match'] = undefined;
/**
 * Filter object defining a match phrase
 * @member {Object} match_phrase
 */
FulltextFilter.prototype['match_phrase'] = undefined;
/**
 * Filter object to select all documents
 * @member {Object} match_all
 */
FulltextFilter.prototype['match_all'] = undefined;




export default QueryFilter;

