/**
 * Manticore Search Client
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HighlightFieldOption from './HighlightFieldOption';
import QueryFilter from './QueryFilter';

/**
 * The Highlight model module.
 * @module model/Highlight
 * @version 8.0.0
 */
class Highlight {
    /**
     * Constructs a new <code>Highlight</code>.
     * @alias module:model/Highlight
     * @implements module:model/HighlightFieldOption
     */
    constructor() { 
        HighlightFieldOption.initialize(this);
        Highlight.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Highlight</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Highlight} obj Optional instance to populate.
     * @return {module:model/Highlight} The populated <code>Highlight</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Highlight();
            HighlightFieldOption.constructFromObject(data, obj);

            if (data.hasOwnProperty('fragment_size')) {
                obj['fragment_size'] = ApiClient.convertToType(data['fragment_size'], Object);
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], Object);
            }
            if (data.hasOwnProperty('limit_snippets')) {
                obj['limit_snippets'] = ApiClient.convertToType(data['limit_snippets'], Object);
            }
            if (data.hasOwnProperty('limit_words')) {
                obj['limit_words'] = ApiClient.convertToType(data['limit_words'], Object);
            }
            if (data.hasOwnProperty('number_of_fragments')) {
                obj['number_of_fragments'] = ApiClient.convertToType(data['number_of_fragments'], Object);
            }
            if (data.hasOwnProperty('after_match')) {
                obj['after_match'] = ApiClient.convertToType(data['after_match'], 'String');
            }
            if (data.hasOwnProperty('allow_empty')) {
                obj['allow_empty'] = ApiClient.convertToType(data['allow_empty'], 'Boolean');
            }
            if (data.hasOwnProperty('around')) {
                obj['around'] = ApiClient.convertToType(data['around'], 'Number');
            }
            if (data.hasOwnProperty('before_match')) {
                obj['before_match'] = ApiClient.convertToType(data['before_match'], 'String');
            }
            if (data.hasOwnProperty('emit_zones')) {
                obj['emit_zones'] = ApiClient.convertToType(data['emit_zones'], 'Boolean');
            }
            if (data.hasOwnProperty('encoder')) {
                obj['encoder'] = ApiClient.convertToType(data['encoder'], 'String');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], Object);
            }
            if (data.hasOwnProperty('force_all_words')) {
                obj['force_all_words'] = ApiClient.convertToType(data['force_all_words'], 'Boolean');
            }
            if (data.hasOwnProperty('force_snippets')) {
                obj['force_snippets'] = ApiClient.convertToType(data['force_snippets'], 'Boolean');
            }
            if (data.hasOwnProperty('highlight_query')) {
                obj['highlight_query'] = QueryFilter.constructFromObject(data['highlight_query']);
            }
            if (data.hasOwnProperty('html_strip_mode')) {
                obj['html_strip_mode'] = ApiClient.convertToType(data['html_strip_mode'], 'String');
            }
            if (data.hasOwnProperty('limits_per_field')) {
                obj['limits_per_field'] = ApiClient.convertToType(data['limits_per_field'], 'Boolean');
            }
            if (data.hasOwnProperty('no_match_size')) {
                obj['no_match_size'] = ApiClient.convertToType(data['no_match_size'], 'Number');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'String');
            }
            if (data.hasOwnProperty('pre_tags')) {
                obj['pre_tags'] = ApiClient.convertToType(data['pre_tags'], 'String');
            }
            if (data.hasOwnProperty('post_tags')) {
                obj['post_tags'] = ApiClient.convertToType(data['post_tags'], 'String');
            }
            if (data.hasOwnProperty('start_snippet_id')) {
                obj['start_snippet_id'] = ApiClient.convertToType(data['start_snippet_id'], 'Number');
            }
            if (data.hasOwnProperty('use_boundaries')) {
                obj['use_boundaries'] = ApiClient.convertToType(data['use_boundaries'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Highlight</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Highlight</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['after_match'] && !(typeof data['after_match'] === 'string' || data['after_match'] instanceof String)) {
            throw new Error("Expected the field `after_match` to be a primitive type in the JSON string but got " + data['after_match']);
        }
        // ensure the json data is a string
        if (data['before_match'] && !(typeof data['before_match'] === 'string' || data['before_match'] instanceof String)) {
            throw new Error("Expected the field `before_match` to be a primitive type in the JSON string but got " + data['before_match']);
        }
        // ensure the json data is a string
        if (data['encoder'] && !(typeof data['encoder'] === 'string' || data['encoder'] instanceof String)) {
            throw new Error("Expected the field `encoder` to be a primitive type in the JSON string but got " + data['encoder']);
        }
        // validate the optional field `highlight_query`
        if (data['highlight_query']) { // data not null
          QueryFilter.validateJSON(data['highlight_query']);
        }
        // ensure the json data is a string
        if (data['html_strip_mode'] && !(typeof data['html_strip_mode'] === 'string' || data['html_strip_mode'] instanceof String)) {
            throw new Error("Expected the field `html_strip_mode` to be a primitive type in the JSON string but got " + data['html_strip_mode']);
        }
        // ensure the json data is a string
        if (data['order'] && !(typeof data['order'] === 'string' || data['order'] instanceof String)) {
            throw new Error("Expected the field `order` to be a primitive type in the JSON string but got " + data['order']);
        }
        // ensure the json data is a string
        if (data['pre_tags'] && !(typeof data['pre_tags'] === 'string' || data['pre_tags'] instanceof String)) {
            throw new Error("Expected the field `pre_tags` to be a primitive type in the JSON string but got " + data['pre_tags']);
        }
        // ensure the json data is a string
        if (data['post_tags'] && !(typeof data['post_tags'] === 'string' || data['post_tags'] instanceof String)) {
            throw new Error("Expected the field `post_tags` to be a primitive type in the JSON string but got " + data['post_tags']);
        }

        return true;
    }


}



/**
 * Maximum size of the text fragments in highlighted snippets per field
 * @member {Object} fragment_size
 */
Highlight.prototype['fragment_size'] = undefined;

/**
 * Maximum size of snippets per field
 * @member {Object} limit
 */
Highlight.prototype['limit'] = undefined;

/**
 * Maximum number of snippets per field
 * @member {Object} limit_snippets
 */
Highlight.prototype['limit_snippets'] = undefined;

/**
 * Maximum number of words per field
 * @member {Object} limit_words
 */
Highlight.prototype['limit_words'] = undefined;

/**
 * Total number of highlighted fragments per field
 * @member {Object} number_of_fragments
 */
Highlight.prototype['number_of_fragments'] = undefined;

/**
 * Text inserted after the matched term, typically used for HTML formatting
 * @member {String} after_match
 * @default '</strong>'
 */
Highlight.prototype['after_match'] = '</strong>';

/**
 * Permits an empty string to be returned as the highlighting result. Otherwise, the beginning of the original text would be returned
 * @member {Boolean} allow_empty
 */
Highlight.prototype['allow_empty'] = undefined;

/**
 * Number of words around the match to include in the highlight
 * @member {Number} around
 */
Highlight.prototype['around'] = undefined;

/**
 * Text inserted before the match, typically used for HTML formatting
 * @member {String} before_match
 * @default '<strong>'
 */
Highlight.prototype['before_match'] = '<strong>';

/**
 * Emits an HTML tag with the enclosing zone name before each highlighted snippet
 * @member {Boolean} emit_zones
 */
Highlight.prototype['emit_zones'] = undefined;

/**
 * If set to 'html', retains HTML markup when highlighting
 * @member {module:model/Highlight.EncoderEnum} encoder
 */
Highlight.prototype['encoder'] = undefined;

/**
 * @member {Object} fields
 */
Highlight.prototype['fields'] = undefined;

/**
 * Ignores the length limit until the result includes all keywords
 * @member {Boolean} force_all_words
 */
Highlight.prototype['force_all_words'] = undefined;

/**
 * Forces snippet generation even if limits allow highlighting the entire text
 * @member {Boolean} force_snippets
 */
Highlight.prototype['force_snippets'] = undefined;

/**
 * @member {module:model/QueryFilter} highlight_query
 */
Highlight.prototype['highlight_query'] = undefined;

/**
 * Defines the mode for handling HTML markup in the highlight
 * @member {module:model/Highlight.HtmlStripModeEnum} html_strip_mode
 */
Highlight.prototype['html_strip_mode'] = undefined;

/**
 * Determines whether the 'limit', 'limit_words', and 'limit_snippets' options operate as individual limits in each field of the document
 * @member {Boolean} limits_per_field
 */
Highlight.prototype['limits_per_field'] = undefined;

/**
 * If set to 1, allows an empty string to be returned as a highlighting result
 * @member {module:model/Highlight.NoMatchSizeEnum} no_match_size
 */
Highlight.prototype['no_match_size'] = undefined;

/**
 * Sets the sorting order of highlighted snippets
 * @member {module:model/Highlight.OrderEnum} order
 */
Highlight.prototype['order'] = undefined;

/**
 * Text inserted before each highlighted snippet
 * @member {String} pre_tags
 * @default '<strong>'
 */
Highlight.prototype['pre_tags'] = '<strong>';

/**
 * Text inserted after each highlighted snippet
 * @member {String} post_tags
 * @default '</strong>'
 */
Highlight.prototype['post_tags'] = '</strong>';

/**
 * Sets the starting value of the %SNIPPET_ID% macro
 * @member {Number} start_snippet_id
 */
Highlight.prototype['start_snippet_id'] = undefined;

/**
 * Defines whether to additionally break snippets by phrase boundary characters
 * @member {Boolean} use_boundaries
 */
Highlight.prototype['use_boundaries'] = undefined;


// Implement HighlightFieldOption interface:
/**
 * Maximum size of the text fragments in highlighted snippets per field
 * @member {Number} fragment_size
 */
HighlightFieldOption.prototype['fragment_size'] = undefined;
/**
 * Maximum size of snippets per field
 * @member {Number} limit
 */
HighlightFieldOption.prototype['limit'] = undefined;
/**
 * Maximum number of snippets per field
 * @member {Number} limit_snippets
 */
HighlightFieldOption.prototype['limit_snippets'] = undefined;
/**
 * Maximum number of words per field
 * @member {Number} limit_words
 */
HighlightFieldOption.prototype['limit_words'] = undefined;
/**
 * Total number of highlighted fragments per field
 * @member {Number} number_of_fragments
 */
HighlightFieldOption.prototype['number_of_fragments'] = undefined;



/**
 * Allowed values for the <code>encoder</code> property.
 * @enum {String}
 * @readonly
 */
Highlight['EncoderEnum'] = {

    /**
     * value: "default"
     * @const
     */
    "default": "default",

    /**
     * value: "html"
     * @const
     */
    "html": "html"
};


/**
 * Allowed values for the <code>html_strip_mode</code> property.
 * @enum {String}
 * @readonly
 */
Highlight['HtmlStripModeEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "strip"
     * @const
     */
    "strip": "strip",

    /**
     * value: "index"
     * @const
     */
    "index": "index",

    /**
     * value: "retain"
     * @const
     */
    "retain": "retain"
};


/**
 * Allowed values for the <code>no_match_size</code> property.
 * @enum {Number}
 * @readonly
 */
Highlight['NoMatchSizeEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1
};


/**
 * Allowed values for the <code>order</code> property.
 * @enum {String}
 * @readonly
 */
Highlight['OrderEnum'] = {

    /**
     * value: "asc"
     * @const
     */
    "asc": "asc",

    /**
     * value: "desc"
     * @const
     */
    "desc": "desc",

    /**
     * value: "score"
     * @const
     */
    "score": "score"
};



export default Highlight;

