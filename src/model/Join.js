/**
 * Manticore Search Client
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FulltextFilter from './FulltextFilter';
import JoinOn from './JoinOn';

/**
 * The Join model module.
 * @module model/Join
 * @version 5.0.0
 */
class Join {
    /**
     * Constructs a new <code>Join</code>.
     * @alias module:model/Join
     * @param type {module:model/Join.TypeEnum} Type of the join operation
     * @param on {Array.<module:model/JoinOn>} List of objects defining joined tables
     * @param table {String} Basic table of the join operation
     */
    constructor(type, on, table) { 
        
        Join.initialize(this, type, on, table);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, on, table) { 
        obj['type'] = type;
        obj['on'] = on;
        obj['table'] = table;
    }

    /**
     * Constructs a <code>Join</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Join} obj Optional instance to populate.
     * @return {module:model/Join} The populated <code>Join</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Join();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('on')) {
                obj['on'] = ApiClient.convertToType(data['on'], [JoinOn]);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = FulltextFilter.constructFromObject(data['query']);
            }
            if (data.hasOwnProperty('table')) {
                obj['table'] = ApiClient.convertToType(data['table'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Join</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Join</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Join.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        if (data['on']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['on'])) {
                throw new Error("Expected the field `on` to be an array in the JSON data but got " + data['on']);
            }
            // validate the optional field `on` (array)
            for (const item of data['on']) {
                JoinOn.validateJSON(item);
            };
        }
        // validate the optional field `query`
        if (data['query']) { // data not null
          FulltextFilter.validateJSON(data['query']);
        }
        // ensure the json data is a string
        if (data['table'] && !(typeof data['table'] === 'string' || data['table'] instanceof String)) {
            throw new Error("Expected the field `table` to be a primitive type in the JSON string but got " + data['table']);
        }

        return true;
    }


}

Join.RequiredProperties = ["type", "on", "table"];

/**
 * Type of the join operation
 * @member {module:model/Join.TypeEnum} type
 */
Join.prototype['type'] = undefined;

/**
 * List of objects defining joined tables
 * @member {Array.<module:model/JoinOn>} on
 */
Join.prototype['on'] = undefined;

/**
 * @member {module:model/FulltextFilter} query
 */
Join.prototype['query'] = undefined;

/**
 * Basic table of the join operation
 * @member {String} table
 */
Join.prototype['table'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Join['TypeEnum'] = {

    /**
     * value: "inner"
     * @const
     */
    "inner": "inner",

    /**
     * value: "left"
     * @const
     */
    "left": "left"
};



export default Join;

