/**
 * Manticore Search Client
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GeoDistanceLocationAnchor from './GeoDistanceLocationAnchor';

/**
 * The GeoDistance model module.
 * @module model/GeoDistance
 * @version 8.1.0
 */
class GeoDistance {
    /**
     * Constructs a new <code>GeoDistance</code>.
     * Object to perform geo-distance based filtering on queries
     * @alias module:model/GeoDistance
     * @extends Object
     */
    constructor() { 
        
        GeoDistance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GeoDistance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeoDistance} obj Optional instance to populate.
     * @return {module:model/GeoDistance} The populated <code>GeoDistance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeoDistance();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('location_anchor')) {
                obj['location_anchor'] = GeoDistanceLocationAnchor.constructFromObject(data['location_anchor']);
            }
            if (data.hasOwnProperty('location_source')) {
                obj['location_source'] = ApiClient.convertToType(data['location_source'], 'String');
            }
            if (data.hasOwnProperty('distance_type')) {
                obj['distance_type'] = ApiClient.convertToType(data['distance_type'], 'String');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeoDistance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeoDistance</code>.
     */
    static validateJSON(data) {
        // validate the optional field `location_anchor`
        if (data['location_anchor']) { // data not null
          GeoDistanceLocationAnchor.validateJSON(data['location_anchor']);
        }
        // ensure the json data is a string
        if (data['location_source'] && !(typeof data['location_source'] === 'string' || data['location_source'] instanceof String)) {
            throw new Error("Expected the field `location_source` to be a primitive type in the JSON string but got " + data['location_source']);
        }
        // ensure the json data is a string
        if (data['distance_type'] && !(typeof data['distance_type'] === 'string' || data['distance_type'] instanceof String)) {
            throw new Error("Expected the field `distance_type` to be a primitive type in the JSON string but got " + data['distance_type']);
        }
        // ensure the json data is a string
        if (data['distance'] && !(typeof data['distance'] === 'string' || data['distance'] instanceof String)) {
            throw new Error("Expected the field `distance` to be a primitive type in the JSON string but got " + data['distance']);
        }

        return true;
    }


}



/**
 * @member {module:model/GeoDistanceLocationAnchor} location_anchor
 */
GeoDistance.prototype['location_anchor'] = undefined;

/**
 * Field name in the document that contains location data
 * @member {String} location_source
 */
GeoDistance.prototype['location_source'] = undefined;

/**
 * Algorithm used to calculate the distance
 * @member {module:model/GeoDistance.DistanceTypeEnum} distance_type
 */
GeoDistance.prototype['distance_type'] = undefined;

/**
 * The distance from the anchor point to filter results by
 * @member {String} distance
 */
GeoDistance.prototype['distance'] = undefined;





/**
 * Allowed values for the <code>distance_type</code> property.
 * @enum {String}
 * @readonly
 */
GeoDistance['DistanceTypeEnum'] = {

    /**
     * value: "adaptive"
     * @const
     */
    "adaptive": "adaptive",

    /**
     * value: "haversine"
     * @const
     */
    "haversine": "haversine"
};



export default GeoDistance;

