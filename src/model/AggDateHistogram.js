/**
 * Manticore Search Client
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AggDateHistogram model module.
 * @module model/AggDateHistogram
 * @version 8.1.0
 */
class AggDateHistogram {
    /**
     * Constructs a new <code>AggDateHistogram</code>.
     * Object to use histograms in aggregation, i.e., grouping search results by histogram values
     * @alias module:model/AggDateHistogram
     * @param field {String} Field to group by
     * @param interval {Number} Interval of the histogram values
     */
    constructor(field, interval) { 
        
        AggDateHistogram.initialize(this, field, interval);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, field, interval) { 
        obj['field'] = field;
        obj['interval'] = interval;
    }

    /**
     * Constructs a <code>AggDateHistogram</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AggDateHistogram} obj Optional instance to populate.
     * @return {module:model/AggDateHistogram} The populated <code>AggDateHistogram</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AggDateHistogram();

            if (data.hasOwnProperty('field')) {
                obj['field'] = ApiClient.convertToType(data['field'], 'String');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'Number');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('keyed')) {
                obj['keyed'] = ApiClient.convertToType(data['keyed'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AggDateHistogram</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AggDateHistogram</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AggDateHistogram.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['field'] && !(typeof data['field'] === 'string' || data['field'] instanceof String)) {
            throw new Error("Expected the field `field` to be a primitive type in the JSON string but got " + data['field']);
        }

        return true;
    }


}

AggDateHistogram.RequiredProperties = ["field", "interval"];

/**
 * Field to group by
 * @member {String} field
 */
AggDateHistogram.prototype['field'] = undefined;

/**
 * Interval of the histogram values
 * @member {Number} interval
 */
AggDateHistogram.prototype['interval'] = undefined;

/**
 * Offset of the histogram values. Default value is 0.
 * @member {Number} offset
 */
AggDateHistogram.prototype['offset'] = undefined;

/**
 * Flag that defines if a search response will be a dictionary with the bucket keys. Default value is false.
 * @member {Boolean} keyed
 */
AggDateHistogram.prototype['keyed'] = undefined;






export default AggDateHistogram;

